{"ast":null,"code":"import _asyncToGenerator from \"/home/golutulshyan/AngularProject/Jewellaryfrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Inject, Directive, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { BehaviorSubject, skip, filter, take, ReplaySubject, AsyncSubject, isObservable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\nclass BaseLoginProvider {\n  constructor() {}\n\n  loadScript(id, src, onload, parentElement = null) {\n    // get document if platform is only browser\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\n      let signInJS = document.createElement('script');\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n\n      if (!parentElement) {\n        parentElement = document.head;\n      }\n\n      parentElement.appendChild(signInJS);\n    }\n  }\n\n}\n\nclass SocialUser {}\n\nconst defaultInitOptions = {\n  oneTapEnabled: true\n};\n\nclass GoogleLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.changeUser = new EventEmitter();\n    this._socialUser = new BehaviorSubject(null);\n    this._accessToken = new BehaviorSubject(null);\n    this._receivedAccessToken = new EventEmitter();\n    this.initOptions = { ...defaultInitOptions,\n      ...this.initOptions\n    }; // emit changeUser events but skip initial value from behaviorSubject\n\n    this._socialUser.pipe(skip(1)).subscribe(this.changeUser); // emit receivedAccessToken but skip initial value from behaviorSubject\n\n\n    this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\n  }\n\n  initialize(autoLogin) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', () => {\n          google.accounts.id.initialize({\n            client_id: this.clientId,\n            auto_select: autoLogin,\n            callback: ({\n              credential\n            }) => {\n              const socialUser = this.createSocialUser(credential);\n\n              this._socialUser.next(socialUser);\n            }\n          });\n\n          if (this.initOptions.oneTapEnabled) {\n            this._socialUser.pipe(filter(user => user === null)).subscribe(() => google.accounts.id.prompt(console.debug));\n          }\n\n          if (this.initOptions.scopes) {\n            const scope = this.initOptions.scopes instanceof Array ? this.initOptions.scopes.filter(s => s).join(' ') : this.initOptions.scopes;\n            this._tokenClient = google.accounts.oauth2.initTokenClient({\n              client_id: this.clientId,\n              scope,\n              callback: tokenResponse => {\n                if (tokenResponse.error) {\n                  this._accessToken.error({\n                    code: tokenResponse.error,\n                    description: tokenResponse.error_description,\n                    uri: tokenResponse.error_uri\n                  });\n                } else {\n                  this._accessToken.next(tokenResponse.access_token);\n                }\n              }\n            });\n          }\n\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this._socialUser.value) {\n        resolve(this._socialUser.value);\n      } else {\n        reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  refreshToken() {\n    return new Promise((resolve, reject) => {\n      google.accounts.id.revoke(this._socialUser.value.id, response => {\n        if (response.error) reject(response.error);else resolve(this._socialUser.value);\n      });\n    });\n  }\n\n  getAccessToken() {\n    return new Promise((resolve, reject) => {\n      if (!this._tokenClient) {\n        if (this._socialUser.value) {\n          reject('No token client was instantiated, you should specify some scopes.');\n        } else {\n          reject('You should be logged-in first.');\n        }\n      } else {\n        this._tokenClient.requestAccessToken({\n          hint: this._socialUser.value?.email\n        });\n\n        this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\n      }\n    });\n  }\n\n  revokeAccessToken() {\n    return new Promise((resolve, reject) => {\n      if (!this._tokenClient) {\n        reject('No token client was instantiated, you should specify some scopes.');\n      } else if (!this._accessToken.value) {\n        reject('No access token to revoke');\n      } else {\n        google.accounts.oauth2.revoke(this._accessToken.value, () => {\n          this._accessToken.next(null);\n\n          resolve();\n        });\n      }\n    });\n  }\n\n  signIn() {\n    return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' + 'or generate the button yourself with \"google.accounts.id.renderButton()\" ' + '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\n  }\n\n  signOut() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      google.accounts.id.disableAutoSelect();\n\n      _this._socialUser.next(null);\n    })();\n  }\n\n  createSocialUser(idToken) {\n    const user = new SocialUser();\n    user.idToken = idToken;\n    const payload = this.decodeJwt(idToken);\n    user.id = payload.sub;\n    user.name = payload.name;\n    user.email = payload.email;\n    user.photoUrl = payload.picture;\n    user.firstName = payload['given_name'];\n    user.lastName = payload['family_name'];\n    return user;\n  }\n\n  decodeJwt(idToken) {\n    return JSON.parse(window.atob(idToken.split('.')[1]));\n  }\n\n}\n\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n/**\r\n * The service encapsulating the social login functionality. Exposes methods like\r\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\r\n * subscribe to get the current logged in user information.\r\n *\r\n * @dynamic\r\n */\n\nclass SocialAuthService {\n  /**\r\n   * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\r\n   */\n  constructor(config, _ngZone, _injector) {\n    this._ngZone = _ngZone;\n    this._injector = _injector;\n    this.providers = new Map();\n    this.autoLogin = false;\n    this._user = null;\n    this._authState = new ReplaySubject(1);\n    /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n\n    this.initialized = false;\n    this._initState = new AsyncSubject();\n\n    if (config instanceof Promise) {\n      config.then(config => {\n        this.initialize(config);\n      });\n    } else {\n      this.initialize(config);\n    }\n  }\n  /** An `Observable` that one can subscribe to get the current logged in user information */\n\n\n  get authState() {\n    return this._authState.asObservable();\n  }\n  /** An `Observable` to communicate the readiness of the service and associated login providers */\n\n\n  get initState() {\n    return this._initState.asObservable();\n  }\n\n  initialize(config) {\n    this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n    const {\n      onError = console.error\n    } = config;\n    config.providers.forEach(item => {\n      this.providers.set(item.id, 'prototype' in item.provider ? this._injector.get(item.provider) : item.provider);\n    });\n    Promise.all(Array.from(this.providers.values()).map(provider => provider.initialize(this.autoLogin))).then(() => {\n      if (this.autoLogin) {\n        const loginStatusPromises = [];\n        let loggedIn = false;\n        this.providers.forEach((provider, key) => {\n          const promise = provider.getLoginStatus();\n          loginStatusPromises.push(promise);\n          promise.then(user => {\n            this.setUser(user, key);\n            loggedIn = true;\n          }).catch(console.debug);\n        });\n        Promise.all(loginStatusPromises).catch(() => {\n          if (!loggedIn) {\n            this._user = null;\n\n            this._authState.next(null);\n          }\n        });\n      }\n\n      this.providers.forEach((provider, key) => {\n        if (isObservable(provider.changeUser)) {\n          provider.changeUser.subscribe(user => {\n            this._ngZone.run(() => {\n              this.setUser(user, key);\n            });\n          });\n        }\n      });\n    }).catch(error => {\n      onError(error);\n    }).finally(() => {\n      this.initialized = true;\n\n      this._initState.next(this.initialized);\n\n      this._initState.complete();\n    });\n  }\n\n  getAccessToken(providerId) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const providerObject = _this2.providers.get(providerId);\n\n      if (!_this2.initialized) {\n        throw SocialAuthService.ERR_NOT_INITIALIZED;\n      } else if (!providerObject) {\n        throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\n      } else if (!(providerObject instanceof GoogleLoginProvider)) {\n        throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\n      }\n\n      return yield providerObject.getAccessToken();\n    })();\n  }\n\n  refreshAuthToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        const providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          if (typeof providerObject.refreshToken !== 'function') {\n            reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n          } else {\n            providerObject.refreshToken().then(user => {\n              this.setUser(user, providerId);\n              resolve();\n            }).catch(err => {\n              reject(err);\n            });\n          }\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n  refreshAccessToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n      } else {\n        const providerObject = this.providers.get(providerId);\n\n        if (providerObject instanceof GoogleLoginProvider) {\n          providerObject.revokeAccessToken().then(resolve).catch(reject);\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\r\n   * A method used to sign in a user with a specific `LoginProvider`.\r\n   *\r\n   * @param providerId Id with which the `LoginProvider` has been registered with the service\r\n   * @param signInOptions Optional `LoginProvider` specific arguments\r\n   * @returns A `Promise` that resolves to the authenticated user information\r\n   */\n\n\n  signIn(providerId, signInOptions) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signIn(signInOptions).then(user => {\n            this.setUser(user, providerId);\n            resolve(user);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\r\n   * A method used to sign out the currently loggen in user.\r\n   *\r\n   * @param revoke Optional parameter to specify whether a hard sign out is to be performed\r\n   * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\r\n   */\n\n\n  signOut(revoke = false) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (!this._user) {\n        reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n      } else {\n        let providerId = this._user.provider;\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signOut(revoke).then(() => {\n            resolve();\n            this.setUser(null);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n  setUser(user, id) {\n    if (user && id) user.provider = id;\n    this._user = user;\n\n    this._authState.next(user);\n  }\n\n}\n\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN = 'Chosen login provider is not supported for getting an access token';\n\nSocialAuthService.ɵfac = function SocialAuthService_Factory(t) {\n  return new (t || SocialAuthService)(i0.ɵɵinject('SocialAuthServiceConfig'), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.Injector));\n};\n\nSocialAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SocialAuthService,\n  factory: SocialAuthService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialAuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['SocialAuthServiceConfig']\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\n\nclass GoogleSigninButtonDirective {\n  constructor(el, socialAuthService) {\n    socialAuthService.initState.pipe(take(1)).subscribe(() => {\n      google.accounts.id.renderButton(el.nativeElement, {\n        type: 'icon',\n        size: 'medium'\n      });\n    });\n  }\n\n}\n\nGoogleSigninButtonDirective.ɵfac = function GoogleSigninButtonDirective_Factory(t) {\n  return new (t || GoogleSigninButtonDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(SocialAuthService));\n};\n\nGoogleSigninButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: GoogleSigninButtonDirective,\n  selectors: [[\"asl-google-signin-button\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleSigninButtonDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: 'asl-google-signin-button'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: SocialAuthService\n    }];\n  }, null);\n})();\n/**\r\n * The main module of angularx-social-login library.\r\n */\n\n\nclass SocialLoginModule {\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  static initialize(config) {\n    return {\n      ngModule: SocialLoginModule,\n      providers: [SocialAuthService, {\n        provide: 'SocialAuthServiceConfig',\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nSocialLoginModule.ɵfac = function SocialLoginModule_Factory(t) {\n  return new (t || SocialLoginModule)(i0.ɵɵinject(SocialLoginModule, 12));\n};\n\nSocialLoginModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SocialLoginModule\n});\nSocialLoginModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [SocialAuthService],\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialLoginModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GoogleSigninButtonDirective],\n      imports: [CommonModule],\n      providers: [SocialAuthService],\n      exports: [GoogleSigninButtonDirective]\n    }]\n  }], function () {\n    return [{\n      type: SocialLoginModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, null);\n})(); // Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\n\n\nclass DummyLoginProvider extends BaseLoginProvider {\n  constructor(dummy) {\n    super();\n\n    if (dummy) {\n      this.dummy = dummy;\n    } else {\n      this.dummy = DummyLoginProvider.DEFAULT_USER;\n    } // Start not logged in\n\n\n    this.loggedIn = false;\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this.loggedIn) {\n        resolve(this.dummy);\n      } else {\n        reject('No user is currently logged in.');\n      }\n    });\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  signIn() {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = true;\n      resolve(this.dummy);\n    });\n  }\n\n  signOut(revoke) {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = false;\n      resolve();\n    });\n  }\n\n}\n\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n  id: '1234567890',\n  name: 'Mickey Mouse',\n  email: 'mickey@mouse.com',\n  firstName: 'Mickey',\n  lastName: 'Mouse',\n  authToken: 'dummyAuthToken',\n  photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n  provider: 'DUMMY',\n  idToken: 'dummyIdToken',\n  authorizationCode: 'dummyAuthCode',\n  response: {}\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {}) {\n    super();\n    this.clientId = clientId;\n    this.requestOptions = {\n      scope: 'email,public_profile',\n      locale: 'en_US',\n      fields: 'name,email,picture,first_name,last_name',\n      version: 'v10.0'\n    };\n    this.requestOptions = { ...this.requestOptions,\n      ...initOptions\n    };\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n          FB.init({\n            appId: this.clientId,\n            autoLogAppEvents: true,\n            cookie: true,\n            xfbml: true,\n            version: this.requestOptions.version\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      FB.getLoginStatus(response => {\n        if (response.status === 'connected') {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${this.requestOptions.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal&access_token=' + authResponse.accessToken;\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n        }\n      });\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = { ...this.requestOptions,\n      ...signInOptions\n    };\n    return new Promise((resolve, reject) => {\n      FB.login(response => {\n        if (response.authResponse) {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${options.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject('User cancelled login or did not fully authorize.');\n        }\n      }, options);\n    });\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      FB.logout(response => {\n        resolve();\n      });\n    });\n  }\n\n}\n\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    scope: 'profile',\n    scope_data: {\n      profile: {\n        essential: false\n      }\n    },\n    redirect_uri: location.origin\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n\n  initialize() {\n    let amazonRoot = null;\n\n    if (document) {\n      amazonRoot = document.createElement('div');\n      amazonRoot.id = 'amazon-root';\n      document.body.appendChild(amazonRoot);\n    }\n\n    window.onAmazonLoginReady = () => {\n      amazon.Login.setClientId(this.clientId);\n    };\n\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n          resolve();\n        }, amazonRoot);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      let token = this.retrieveToken();\n\n      if (token) {\n        amazon.Login.retrieveProfile(token, response => {\n          if (response.success) {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.response = response.profile;\n            resolve(user);\n          } else {\n            reject(response.error);\n          }\n        });\n      } else {\n        reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = { ...this.initOptions,\n      ...signInOptions\n    };\n    return new Promise((resolve, reject) => {\n      amazon.Login.authorize(options, authResponse => {\n        if (authResponse.error) {\n          reject(authResponse.error);\n        } else {\n          amazon.Login.retrieveProfile(authResponse.access_token, response => {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.authToken = authResponse.access_token;\n            user.response = response.profile;\n            this.persistToken(authResponse.access_token);\n            resolve(user);\n          });\n        }\n      });\n    });\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      try {\n        amazon.Login.logout();\n        this.clearToken();\n        resolve();\n      } catch (err) {\n        reject(err.message);\n      }\n    });\n  }\n\n  persistToken(token) {\n    localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n  }\n\n  retrieveToken() {\n    return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n  clearToken() {\n    localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n}\n\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    fields: 'photo_max,contacts',\n    version: '5.124'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.VK_API_URL = '//vk.com/js/api/openapi.js';\n    this.VK_API_GET_USER = 'users.get';\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n          VK.init({\n            apiId: this.clientId\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\n  }\n\n  signIn() {\n    return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      VK.Auth.logout(response => {\n        resolve();\n      });\n    });\n  }\n\n  signInInternal(resolve, reject) {\n    VK.Auth.login(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n\n  getUser(userId, token, resolve) {\n    VK.Api.call(this.VK_API_GET_USER, {\n      user_id: userId,\n      fields: this.initOptions.fields,\n      v: this.initOptions.version\n    }, userResponse => {\n      resolve(this.createUser(Object.assign({}, {\n        token\n      }, userResponse.response[0])));\n    });\n  }\n\n  getLoginStatusInternal(resolve, reject) {\n    VK.Auth.getLoginStatus(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n\n  createUser(response) {\n    const user = new SocialUser();\n    user.id = response.id;\n    user.name = `${response.first_name} ${response.last_name}`;\n    user.photoUrl = response.photo_max;\n    user.authToken = response.token;\n    return user;\n  }\n\n}\n\nVKLoginProvider.PROVIDER_ID = 'VK';\n/**\r\n * Protocol modes supported by MSAL.\r\n */\n\nvar ProtocolMode;\n\n(function (ProtocolMode) {\n  ProtocolMode[\"AAD\"] = \"AAD\";\n  ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\n\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\r\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\r\n */\n\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = {\n      authority: COMMON_AUTHORITY,\n      scopes: ['openid', 'email', 'profile', 'User.Read'],\n      knownAuthorities: [],\n      protocolMode: ProtocolMode.AAD,\n      clientCapabilities: [],\n      cacheLocation: 'sessionStorage'\n    };\n    this.initOptions = { ...this.initOptions,\n      ...initOptions\n    };\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', () => {\n        try {\n          const config = {\n            auth: {\n              clientId: this.clientId,\n              redirectUri: this.initOptions.redirect_uri ?? location.origin,\n              authority: this.initOptions.authority,\n              knownAuthorities: this.initOptions.knownAuthorities,\n              protocolMode: this.initOptions.protocolMode,\n              clientCapabilities: this.initOptions.clientCapabilities\n            },\n            cache: !this.initOptions.cacheLocation ? null : {\n              cacheLocation: this.initOptions.cacheLocation\n            }\n          };\n          this._instance = new msal.PublicClientApplication(config);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n\n  getSocialUser(loginResponse) {\n    return new Promise((resolve, reject) => {\n      //After login, use Microsoft Graph API to get user info\n      let meRequest = new XMLHttpRequest();\n\n      meRequest.onreadystatechange = () => {\n        if (meRequest.readyState == 4) {\n          try {\n            if (meRequest.status == 200) {\n              let userInfo = JSON.parse(meRequest.responseText);\n              let user = new SocialUser();\n              user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n              user.id = loginResponse.idToken;\n              user.authToken = loginResponse.accessToken;\n              user.name = loginResponse.idTokenClaims.name;\n              user.email = loginResponse.account.username;\n              user.idToken = loginResponse.idToken;\n              user.response = loginResponse;\n              user.firstName = userInfo.givenName;\n              user.lastName = userInfo.surname;\n              resolve(user);\n            } else {\n              reject(`Error retrieving user info: ${meRequest.status}`);\n            }\n          } catch (err) {\n            reject(err);\n          }\n        }\n      }; //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n\n\n      meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n      meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n\n      try {\n        meRequest.send();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const accounts = _this3._instance.getAllAccounts();\n\n      if (accounts?.length > 0) {\n        const loginResponse = yield _this3._instance.ssoSilent({\n          scopes: _this3.initOptions.scopes,\n          loginHint: accounts[0].username\n        });\n        return yield _this3.getSocialUser(loginResponse);\n      } else {\n        throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n      }\n    })();\n  }\n\n  signIn() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const loginResponse = yield _this4._instance.loginPopup({\n        scopes: _this4.initOptions.scopes,\n        prompt: _this4.initOptions.prompt\n      });\n      return yield _this4.getSocialUser(loginResponse);\n    })();\n  }\n\n  signOut(revoke) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const accounts = _this5._instance.getAllAccounts();\n\n      if (accounts?.length > 0) {\n        yield _this5._instance.logoutPopup({\n          account: accounts[0],\n          postLogoutRedirectUri: _this5.initOptions.logout_redirect_uri ?? _this5.initOptions.redirect_uri ?? location.href\n        });\n      }\n    })();\n  }\n\n}\n\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, GoogleSigninButtonDirective, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };","map":{"version":3,"names":["i0","EventEmitter","Injectable","Inject","Directive","NgModule","Optional","SkipSelf","BehaviorSubject","skip","filter","take","ReplaySubject","AsyncSubject","isObservable","CommonModule","BaseLoginProvider","constructor","loadScript","id","src","onload","parentElement","document","getElementById","signInJS","createElement","async","head","appendChild","SocialUser","defaultInitOptions","oneTapEnabled","GoogleLoginProvider","clientId","initOptions","changeUser","_socialUser","_accessToken","_receivedAccessToken","pipe","subscribe","initialize","autoLogin","Promise","resolve","reject","PROVIDER_ID","google","accounts","client_id","auto_select","callback","credential","socialUser","createSocialUser","next","user","prompt","console","debug","scopes","scope","Array","s","join","_tokenClient","oauth2","initTokenClient","tokenResponse","error","code","description","error_description","uri","error_uri","access_token","err","getLoginStatus","value","refreshToken","revoke","response","getAccessToken","requestAccessToken","hint","email","revokeAccessToken","signIn","signOut","disableAutoSelect","idToken","payload","decodeJwt","sub","name","photoUrl","picture","firstName","lastName","JSON","parse","window","atob","split","SocialAuthService","config","_ngZone","_injector","providers","Map","_user","_authState","initialized","_initState","then","authState","asObservable","initState","undefined","onError","forEach","item","set","provider","get","all","from","values","map","loginStatusPromises","loggedIn","key","promise","push","setUser","catch","run","finally","complete","providerId","providerObject","ERR_NOT_INITIALIZED","ERR_LOGIN_PROVIDER_NOT_FOUND","ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN","refreshAuthToken","ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN","refreshAccessToken","signInOptions","ERR_NOT_LOGGED_IN","ɵfac","NgZone","Injector","ɵprov","type","args","providedIn","decorators","GoogleSigninButtonDirective","el","socialAuthService","renderButton","nativeElement","size","ElementRef","ɵdir","selector","SocialLoginModule","parentModule","Error","ngModule","provide","useValue","ɵmod","ɵinj","declarations","imports","exports","DummyLoginProvider","dummy","DEFAULT_USER","authToken","authorizationCode","FacebookLoginProvider","requestOptions","locale","fields","version","FB","init","appId","autoLogAppEvents","cookie","xfbml","status","authResponse","api","fbUser","accessToken","first_name","last_name","options","login","logout","AmazonLoginProvider","scope_data","profile","essential","redirect_uri","location","origin","amazonRoot","body","onAmazonLoginReady","amazon","Login","setClientId","token","retrieveToken","retrieveProfile","success","CustomerId","Name","PrimaryEmail","authorize","persistToken","clearToken","message","localStorage","setItem","getItem","removeItem","VKLoginProvider","VK_API_URL","VK_API_GET_USER","VK","apiId","getLoginStatusInternal","signInInternal","Auth","loginResponse","getUser","session","mid","sid","userId","Api","call","user_id","v","userResponse","createUser","Object","assign","photo_max","ProtocolMode","COMMON_AUTHORITY","MicrosoftLoginProvider","authority","knownAuthorities","protocolMode","AAD","clientCapabilities","cacheLocation","auth","redirectUri","cache","_instance","msal","PublicClientApplication","e","getSocialUser","meRequest","XMLHttpRequest","onreadystatechange","readyState","userInfo","responseText","idTokenClaims","account","username","givenName","surname","open","setRequestHeader","send","getAllAccounts","length","ssoSilent","loginHint","loginPopup","logoutPopup","postLogoutRedirectUri","logout_redirect_uri","href"],"sources":["/home/golutulshyan/AngularProject/Jewellaryfrontend/node_modules/@abacritt/angularx-social-login/fesm2020/abacritt-angularx-social-login.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Inject, Directive, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { BehaviorSubject, skip, filter, take, ReplaySubject, AsyncSubject, isObservable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\nclass BaseLoginProvider {\r\n    constructor() { }\r\n    loadScript(id, src, onload, parentElement = null) {\r\n        // get document if platform is only browser\r\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\r\n            let signInJS = document.createElement('script');\r\n            signInJS.async = true;\r\n            signInJS.src = src;\r\n            signInJS.onload = onload;\r\n            if (!parentElement) {\r\n                parentElement = document.head;\r\n            }\r\n            parentElement.appendChild(signInJS);\r\n        }\r\n    }\r\n}\n\nclass SocialUser {\r\n}\n\nconst defaultInitOptions = {\r\n    oneTapEnabled: true,\r\n};\r\nclass GoogleLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n        this.changeUser = new EventEmitter();\r\n        this._socialUser = new BehaviorSubject(null);\r\n        this._accessToken = new BehaviorSubject(null);\r\n        this._receivedAccessToken = new EventEmitter();\r\n        this.initOptions = { ...defaultInitOptions, ...this.initOptions };\r\n        // emit changeUser events but skip initial value from behaviorSubject\r\n        this._socialUser.pipe(skip(1)).subscribe(this.changeUser);\r\n        // emit receivedAccessToken but skip initial value from behaviorSubject\r\n        this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\r\n    }\r\n    initialize(autoLogin) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', () => {\r\n                    google.accounts.id.initialize({\r\n                        client_id: this.clientId,\r\n                        auto_select: autoLogin,\r\n                        callback: ({ credential }) => {\r\n                            const socialUser = this.createSocialUser(credential);\r\n                            this._socialUser.next(socialUser);\r\n                        },\r\n                    });\r\n                    if (this.initOptions.oneTapEnabled) {\r\n                        this._socialUser\r\n                            .pipe(filter((user) => user === null))\r\n                            .subscribe(() => google.accounts.id.prompt(console.debug));\r\n                    }\r\n                    if (this.initOptions.scopes) {\r\n                        const scope = this.initOptions.scopes instanceof Array\r\n                            ? this.initOptions.scopes.filter((s) => s).join(' ')\r\n                            : this.initOptions.scopes;\r\n                        this._tokenClient = google.accounts.oauth2.initTokenClient({\r\n                            client_id: this.clientId,\r\n                            scope,\r\n                            callback: (tokenResponse) => {\r\n                                if (tokenResponse.error) {\r\n                                    this._accessToken.error({\r\n                                        code: tokenResponse.error,\r\n                                        description: tokenResponse.error_description,\r\n                                        uri: tokenResponse.error_uri,\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    this._accessToken.next(tokenResponse.access_token);\r\n                                }\r\n                            },\r\n                        });\r\n                    }\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this._socialUser.value) {\r\n                resolve(this._socialUser.value);\r\n            }\r\n            else {\r\n                reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\r\n            }\r\n        });\r\n    }\r\n    refreshToken() {\r\n        return new Promise((resolve, reject) => {\r\n            google.accounts.id.revoke(this._socialUser.value.id, (response) => {\r\n                if (response.error)\r\n                    reject(response.error);\r\n                else\r\n                    resolve(this._socialUser.value);\r\n            });\r\n        });\r\n    }\r\n    getAccessToken() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this._tokenClient) {\r\n                if (this._socialUser.value) {\r\n                    reject('No token client was instantiated, you should specify some scopes.');\r\n                }\r\n                else {\r\n                    reject('You should be logged-in first.');\r\n                }\r\n            }\r\n            else {\r\n                this._tokenClient.requestAccessToken({\r\n                    hint: this._socialUser.value?.email,\r\n                });\r\n                this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\r\n            }\r\n        });\r\n    }\r\n    revokeAccessToken() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this._tokenClient) {\r\n                reject('No token client was instantiated, you should specify some scopes.');\r\n            }\r\n            else if (!this._accessToken.value) {\r\n                reject('No access token to revoke');\r\n            }\r\n            else {\r\n                google.accounts.oauth2.revoke(this._accessToken.value, () => {\r\n                    this._accessToken.next(null);\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    }\r\n    signIn() {\r\n        return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' +\r\n            'or generate the button yourself with \"google.accounts.id.renderButton()\" ' +\r\n            '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\r\n    }\r\n    async signOut() {\r\n        google.accounts.id.disableAutoSelect();\r\n        this._socialUser.next(null);\r\n    }\r\n    createSocialUser(idToken) {\r\n        const user = new SocialUser();\r\n        user.idToken = idToken;\r\n        const payload = this.decodeJwt(idToken);\r\n        user.id = payload.sub;\r\n        user.name = payload.name;\r\n        user.email = payload.email;\r\n        user.photoUrl = payload.picture;\r\n        user.firstName = payload['given_name'];\r\n        user.lastName = payload['family_name'];\r\n        return user;\r\n    }\r\n    decodeJwt(idToken) {\r\n        return JSON.parse(window.atob(idToken.split('.')[1]));\r\n    }\r\n}\r\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n\n/**\r\n * The service encapsulating the social login functionality. Exposes methods like\r\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\r\n * subscribe to get the current logged in user information.\r\n *\r\n * @dynamic\r\n */\r\nclass SocialAuthService {\r\n    /**\r\n     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\r\n     */\r\n    constructor(config, _ngZone, _injector) {\r\n        this._ngZone = _ngZone;\r\n        this._injector = _injector;\r\n        this.providers = new Map();\r\n        this.autoLogin = false;\r\n        this._user = null;\r\n        this._authState = new ReplaySubject(1);\r\n        /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\r\n        this.initialized = false;\r\n        this._initState = new AsyncSubject();\r\n        if (config instanceof Promise) {\r\n            config.then((config) => {\r\n                this.initialize(config);\r\n            });\r\n        }\r\n        else {\r\n            this.initialize(config);\r\n        }\r\n    }\r\n    /** An `Observable` that one can subscribe to get the current logged in user information */\r\n    get authState() {\r\n        return this._authState.asObservable();\r\n    }\r\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\r\n    get initState() {\r\n        return this._initState.asObservable();\r\n    }\r\n    initialize(config) {\r\n        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\r\n        const { onError = console.error } = config;\r\n        config.providers.forEach((item) => {\r\n            this.providers.set(item.id, 'prototype' in item.provider\r\n                ? this._injector.get(item.provider)\r\n                : item.provider);\r\n        });\r\n        Promise.all(Array.from(this.providers.values()).map((provider) => provider.initialize(this.autoLogin)))\r\n            .then(() => {\r\n            if (this.autoLogin) {\r\n                const loginStatusPromises = [];\r\n                let loggedIn = false;\r\n                this.providers.forEach((provider, key) => {\r\n                    const promise = provider.getLoginStatus();\r\n                    loginStatusPromises.push(promise);\r\n                    promise\r\n                        .then((user) => {\r\n                        this.setUser(user, key);\r\n                        loggedIn = true;\r\n                    })\r\n                        .catch(console.debug);\r\n                });\r\n                Promise.all(loginStatusPromises).catch(() => {\r\n                    if (!loggedIn) {\r\n                        this._user = null;\r\n                        this._authState.next(null);\r\n                    }\r\n                });\r\n            }\r\n            this.providers.forEach((provider, key) => {\r\n                if (isObservable(provider.changeUser)) {\r\n                    provider.changeUser.subscribe((user) => {\r\n                        this._ngZone.run(() => {\r\n                            this.setUser(user, key);\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        })\r\n            .catch((error) => {\r\n            onError(error);\r\n        })\r\n            .finally(() => {\r\n            this.initialized = true;\r\n            this._initState.next(this.initialized);\r\n            this._initState.complete();\r\n        });\r\n    }\r\n    async getAccessToken(providerId) {\r\n        const providerObject = this.providers.get(providerId);\r\n        if (!this.initialized) {\r\n            throw SocialAuthService.ERR_NOT_INITIALIZED;\r\n        }\r\n        else if (!providerObject) {\r\n            throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\r\n        }\r\n        else if (!(providerObject instanceof GoogleLoginProvider)) {\r\n            throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\r\n        }\r\n        return await providerObject.getAccessToken();\r\n    }\r\n    refreshAuthToken(providerId) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else {\r\n                const providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    if (typeof providerObject.refreshToken !== 'function') {\r\n                        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\r\n                    }\r\n                    else {\r\n                        providerObject\r\n                            .refreshToken()\r\n                            .then((user) => {\r\n                            this.setUser(user, providerId);\r\n                            resolve();\r\n                        })\r\n                            .catch((err) => {\r\n                            reject(err);\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    refreshAccessToken(providerId) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\r\n                reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\r\n            }\r\n            else {\r\n                const providerObject = this.providers.get(providerId);\r\n                if (providerObject instanceof GoogleLoginProvider) {\r\n                    providerObject.revokeAccessToken().then(resolve).catch(reject);\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * A method used to sign in a user with a specific `LoginProvider`.\r\n     *\r\n     * @param providerId Id with which the `LoginProvider` has been registered with the service\r\n     * @param signInOptions Optional `LoginProvider` specific arguments\r\n     * @returns A `Promise` that resolves to the authenticated user information\r\n     */\r\n    signIn(providerId, signInOptions) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else {\r\n                let providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    providerObject\r\n                        .signIn(signInOptions)\r\n                        .then((user) => {\r\n                        this.setUser(user, providerId);\r\n                        resolve(user);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * A method used to sign out the currently loggen in user.\r\n     *\r\n     * @param revoke Optional parameter to specify whether a hard sign out is to be performed\r\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\r\n     */\r\n    signOut(revoke = false) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else if (!this._user) {\r\n                reject(SocialAuthService.ERR_NOT_LOGGED_IN);\r\n            }\r\n            else {\r\n                let providerId = this._user.provider;\r\n                let providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    providerObject\r\n                        .signOut(revoke)\r\n                        .then(() => {\r\n                        resolve();\r\n                        this.setUser(null);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    setUser(user, id) {\r\n        if (user && id)\r\n            user.provider = id;\r\n        this._user = user;\r\n        this._authState.next(user);\r\n    }\r\n}\r\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\r\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\r\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\r\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\r\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN = 'Chosen login provider is not supported for getting an access token';\r\nSocialAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: SocialAuthService, deps: [{ token: 'SocialAuthServiceConfig' }, { token: i0.NgZone }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\r\nSocialAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: SocialAuthService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: SocialAuthService, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: ['SocialAuthServiceConfig']\r\n                }] }, { type: i0.NgZone }, { type: i0.Injector }]; } });\n\nclass GoogleSigninButtonDirective {\r\n    constructor(el, socialAuthService) {\r\n        socialAuthService.initState.pipe(take(1)).subscribe(() => {\r\n            google.accounts.id.renderButton(el.nativeElement, {\r\n                type: 'icon',\r\n                size: 'medium',\r\n            });\r\n        });\r\n    }\r\n}\r\nGoogleSigninButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleSigninButtonDirective, deps: [{ token: i0.ElementRef }, { token: SocialAuthService }], target: i0.ɵɵFactoryTarget.Directive });\r\nGoogleSigninButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.3\", type: GoogleSigninButtonDirective, selector: \"asl-google-signin-button\", ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleSigninButtonDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    // eslint-disable-next-line @angular-eslint/directive-selector\r\n                    selector: 'asl-google-signin-button',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: SocialAuthService }]; } });\n\n/**\r\n * The main module of angularx-social-login library.\r\n */\r\nclass SocialLoginModule {\r\n    constructor(parentModule) {\r\n        if (parentModule) {\r\n            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\r\n        }\r\n    }\r\n    static initialize(config) {\r\n        return {\r\n            ngModule: SocialLoginModule,\r\n            providers: [\r\n                SocialAuthService,\r\n                {\r\n                    provide: 'SocialAuthServiceConfig',\r\n                    useValue: config\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\nSocialLoginModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: SocialLoginModule, deps: [{ token: SocialLoginModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nSocialLoginModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.3\", ngImport: i0, type: SocialLoginModule, declarations: [GoogleSigninButtonDirective], imports: [CommonModule], exports: [GoogleSigninButtonDirective] });\r\nSocialLoginModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: SocialLoginModule, providers: [\r\n        SocialAuthService\r\n    ], imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: SocialLoginModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [GoogleSigninButtonDirective],\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    providers: [\r\n                        SocialAuthService\r\n                    ],\r\n                    exports: [GoogleSigninButtonDirective]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: SocialLoginModule, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: SkipSelf\r\n                }] }]; } });\n\n// Simulates login / logout without actually requiring an Internet connection.\r\n//\r\n// Useful for certain development situations.\r\n//\r\n// For example, if you want to simulate the greatest football referee England has ever produced:\r\n//\r\n//  const dummyUser: SocialUser = {\r\n//     id: '0123456789',\r\n//     name: 'Howard Webb',\r\n//     email: 'howard@webb.com',\r\n//     firstName: 'Howard',\r\n//     lastName: 'Webb',\r\n//     authToken: 'dummyAuthToken',\r\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\r\n//     provider: 'DUMMY',\r\n//     idToken: 'dummyIdToken',\r\n//     authorizationCode: 'dummyAuthCode'\r\n// };\r\n//\r\n//  let config = new AuthServiceConfig([\r\n//  { ... },\r\n//  {\r\n//       id: DummyLoginProvider.PROVIDER_ID,\r\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\r\n//   },\r\n//  { ... }\r\n//  ]);\r\nclass DummyLoginProvider extends BaseLoginProvider {\r\n    constructor(dummy) {\r\n        super();\r\n        if (dummy) {\r\n            this.dummy = dummy;\r\n        }\r\n        else {\r\n            this.dummy = DummyLoginProvider.DEFAULT_USER;\r\n        }\r\n        // Start not logged in\r\n        this.loggedIn = false;\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.loggedIn) {\r\n                resolve(this.dummy);\r\n            }\r\n            else {\r\n                reject('No user is currently logged in.');\r\n            }\r\n        });\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    signIn() {\r\n        return new Promise((resolve, reject) => {\r\n            this.loggedIn = true;\r\n            resolve(this.dummy);\r\n        });\r\n    }\r\n    signOut(revoke) {\r\n        return new Promise((resolve, reject) => {\r\n            this.loggedIn = false;\r\n            resolve();\r\n        });\r\n    }\r\n}\r\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\r\nDummyLoginProvider.DEFAULT_USER = {\r\n    id: '1234567890',\r\n    name: 'Mickey Mouse',\r\n    email: 'mickey@mouse.com',\r\n    firstName: 'Mickey',\r\n    lastName: 'Mouse',\r\n    authToken: 'dummyAuthToken',\r\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\r\n    provider: 'DUMMY',\r\n    idToken: 'dummyIdToken',\r\n    authorizationCode: 'dummyAuthCode',\r\n    response: {},\r\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {}) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.requestOptions = {\r\n            scope: 'email,public_profile',\r\n            locale: 'en_US',\r\n            fields: 'name,email,picture,first_name,last_name',\r\n            version: 'v10.0',\r\n        };\r\n        this.requestOptions = {\r\n            ...this.requestOptions,\r\n            ...initOptions,\r\n        };\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\r\n                    FB.init({\r\n                        appId: this.clientId,\r\n                        autoLogAppEvents: true,\r\n                        cookie: true,\r\n                        xfbml: true,\r\n                        version: this.requestOptions.version,\r\n                    });\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            FB.getLoginStatus((response) => {\r\n                if (response.status === 'connected') {\r\n                    let authResponse = response.authResponse;\r\n                    FB.api(`/me?fields=${this.requestOptions.fields}`, (fbUser) => {\r\n                        let user = new SocialUser();\r\n                        user.id = fbUser.id;\r\n                        user.name = fbUser.name;\r\n                        user.email = fbUser.email;\r\n                        user.photoUrl =\r\n                            'https://graph.facebook.com/' +\r\n                                fbUser.id +\r\n                                '/picture?type=normal&access_token=' +\r\n                                authResponse.accessToken;\r\n                        user.firstName = fbUser.first_name;\r\n                        user.lastName = fbUser.last_name;\r\n                        user.authToken = authResponse.accessToken;\r\n                        user.response = fbUser;\r\n                        resolve(user);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    signIn(signInOptions) {\r\n        const options = { ...this.requestOptions, ...signInOptions };\r\n        return new Promise((resolve, reject) => {\r\n            FB.login((response) => {\r\n                if (response.authResponse) {\r\n                    let authResponse = response.authResponse;\r\n                    FB.api(`/me?fields=${options.fields}`, (fbUser) => {\r\n                        let user = new SocialUser();\r\n                        user.id = fbUser.id;\r\n                        user.name = fbUser.name;\r\n                        user.email = fbUser.email;\r\n                        user.photoUrl =\r\n                            'https://graph.facebook.com/' +\r\n                                fbUser.id +\r\n                                '/picture?type=normal';\r\n                        user.firstName = fbUser.first_name;\r\n                        user.lastName = fbUser.last_name;\r\n                        user.authToken = authResponse.accessToken;\r\n                        user.response = fbUser;\r\n                        resolve(user);\r\n                    });\r\n                }\r\n                else {\r\n                    reject('User cancelled login or did not fully authorize.');\r\n                }\r\n            }, options);\r\n        });\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            FB.logout((response) => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n}\r\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {\r\n        scope: 'profile',\r\n        scope_data: {\r\n            profile: { essential: false },\r\n        },\r\n        redirect_uri: location.origin,\r\n    }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n    }\r\n    initialize() {\r\n        let amazonRoot = null;\r\n        if (document) {\r\n            amazonRoot = document.createElement('div');\r\n            amazonRoot.id = 'amazon-root';\r\n            document.body.appendChild(amazonRoot);\r\n        }\r\n        window.onAmazonLoginReady = () => {\r\n            amazon.Login.setClientId(this.clientId);\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\r\n                    resolve();\r\n                }, amazonRoot);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            let token = this.retrieveToken();\r\n            if (token) {\r\n                amazon.Login.retrieveProfile(token, (response) => {\r\n                    if (response.success) {\r\n                        let user = new SocialUser();\r\n                        user.id = response.profile.CustomerId;\r\n                        user.name = response.profile.Name;\r\n                        user.email = response.profile.PrimaryEmail;\r\n                        user.response = response.profile;\r\n                        resolve(user);\r\n                    }\r\n                    else {\r\n                        reject(response.error);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\r\n            }\r\n        });\r\n    }\r\n    signIn(signInOptions) {\r\n        const options = { ...this.initOptions, ...signInOptions };\r\n        return new Promise((resolve, reject) => {\r\n            amazon.Login.authorize(options, (authResponse) => {\r\n                if (authResponse.error) {\r\n                    reject(authResponse.error);\r\n                }\r\n                else {\r\n                    amazon.Login.retrieveProfile(authResponse.access_token, (response) => {\r\n                        let user = new SocialUser();\r\n                        user.id = response.profile.CustomerId;\r\n                        user.name = response.profile.Name;\r\n                        user.email = response.profile.PrimaryEmail;\r\n                        user.authToken = authResponse.access_token;\r\n                        user.response = response.profile;\r\n                        this.persistToken(authResponse.access_token);\r\n                        resolve(user);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                amazon.Login.logout();\r\n                this.clearToken();\r\n                resolve();\r\n            }\r\n            catch (err) {\r\n                reject(err.message);\r\n            }\r\n        });\r\n    }\r\n    persistToken(token) {\r\n        localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\r\n    }\r\n    retrieveToken() {\r\n        return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\r\n    }\r\n    clearToken() {\r\n        localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\r\n    }\r\n}\r\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {\r\n        fields: 'photo_max,contacts',\r\n        version: '5.124',\r\n    }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n        this.VK_API_URL = '//vk.com/js/api/openapi.js';\r\n        this.VK_API_GET_USER = 'users.get';\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\r\n                    VK.init({\r\n                        apiId: this.clientId,\r\n                    });\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\r\n    }\r\n    signIn() {\r\n        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            VK.Auth.logout((response) => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    signInInternal(resolve, reject) {\r\n        VK.Auth.login((loginResponse) => {\r\n            if (loginResponse.status === 'connected') {\r\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\r\n            }\r\n        });\r\n    }\r\n    getUser(userId, token, resolve) {\r\n        VK.Api.call(this.VK_API_GET_USER, {\r\n            user_id: userId,\r\n            fields: this.initOptions.fields,\r\n            v: this.initOptions.version,\r\n        }, (userResponse) => {\r\n            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));\r\n        });\r\n    }\r\n    getLoginStatusInternal(resolve, reject) {\r\n        VK.Auth.getLoginStatus((loginResponse) => {\r\n            if (loginResponse.status === 'connected') {\r\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\r\n            }\r\n        });\r\n    }\r\n    createUser(response) {\r\n        const user = new SocialUser();\r\n        user.id = response.id;\r\n        user.name = `${response.first_name} ${response.last_name}`;\r\n        user.photoUrl = response.photo_max;\r\n        user.authToken = response.token;\r\n        return user;\r\n    }\r\n}\r\nVKLoginProvider.PROVIDER_ID = 'VK';\n\n/**\r\n * Protocol modes supported by MSAL.\r\n */\r\nvar ProtocolMode;\r\n(function (ProtocolMode) {\r\n    ProtocolMode[\"AAD\"] = \"AAD\";\r\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\r\n})(ProtocolMode || (ProtocolMode = {}));\r\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\r\n/**\r\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\r\n */\r\nclass MicrosoftLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = {\r\n            authority: COMMON_AUTHORITY,\r\n            scopes: ['openid', 'email', 'profile', 'User.Read'],\r\n            knownAuthorities: [],\r\n            protocolMode: ProtocolMode.AAD,\r\n            clientCapabilities: [],\r\n            cacheLocation: 'sessionStorage'\r\n        };\r\n        this.initOptions = {\r\n            ...this.initOptions,\r\n            ...initOptions\r\n        };\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', () => {\r\n                try {\r\n                    const config = {\r\n                        auth: {\r\n                            clientId: this.clientId,\r\n                            redirectUri: this.initOptions.redirect_uri ?? location.origin,\r\n                            authority: this.initOptions.authority,\r\n                            knownAuthorities: this.initOptions.knownAuthorities,\r\n                            protocolMode: this.initOptions.protocolMode,\r\n                            clientCapabilities: this.initOptions.clientCapabilities\r\n                        },\r\n                        cache: !this.initOptions.cacheLocation ? null : {\r\n                            cacheLocation: this.initOptions.cacheLocation\r\n                        }\r\n                    };\r\n                    this._instance = new msal.PublicClientApplication(config);\r\n                    resolve();\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    getSocialUser(loginResponse) {\r\n        return new Promise((resolve, reject) => {\r\n            //After login, use Microsoft Graph API to get user info\r\n            let meRequest = new XMLHttpRequest();\r\n            meRequest.onreadystatechange = () => {\r\n                if (meRequest.readyState == 4) {\r\n                    try {\r\n                        if (meRequest.status == 200) {\r\n                            let userInfo = JSON.parse(meRequest.responseText);\r\n                            let user = new SocialUser();\r\n                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;\r\n                            user.id = loginResponse.idToken;\r\n                            user.authToken = loginResponse.accessToken;\r\n                            user.name = loginResponse.idTokenClaims.name;\r\n                            user.email = loginResponse.account.username;\r\n                            user.idToken = loginResponse.idToken;\r\n                            user.response = loginResponse;\r\n                            user.firstName = userInfo.givenName;\r\n                            user.lastName = userInfo.surname;\r\n                            resolve(user);\r\n                        }\r\n                        else {\r\n                            reject(`Error retrieving user info: ${meRequest.status}`);\r\n                        }\r\n                    }\r\n                    catch (err) {\r\n                        reject(err);\r\n                    }\r\n                }\r\n            };\r\n            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\r\n            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\r\n            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\r\n            try {\r\n                meRequest.send();\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    async getLoginStatus() {\r\n        const accounts = this._instance.getAllAccounts();\r\n        if (accounts?.length > 0) {\r\n            const loginResponse = await this._instance.ssoSilent({\r\n                scopes: this.initOptions.scopes,\r\n                loginHint: accounts[0].username\r\n            });\r\n            return await this.getSocialUser(loginResponse);\r\n        }\r\n        else {\r\n            throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\r\n        }\r\n    }\r\n    async signIn() {\r\n        const loginResponse = await this._instance.loginPopup({\r\n            scopes: this.initOptions.scopes,\r\n            prompt: this.initOptions.prompt,\r\n        });\r\n        return await this.getSocialUser(loginResponse);\r\n    }\r\n    async signOut(revoke) {\r\n        const accounts = this._instance.getAllAccounts();\r\n        if (accounts?.length > 0) {\r\n            await this._instance.logoutPopup({\r\n                account: accounts[0],\r\n                postLogoutRedirectUri: this.initOptions.logout_redirect_uri ?? this.initOptions.redirect_uri ?? location.href\r\n            });\r\n        }\r\n    }\r\n}\r\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, GoogleSigninButtonDirective, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}